
import { Page } from "widgets/Page";
import { classNames } from "shared/lib/classNames";
import cls from './ArchivePage.module.sass';
import { Dropdown } from "shared/ui/Dropdown";
import { useEffect, useRef, useState } from "react";
import { useAppDispatch, useAppSelector } from "models/Hook";
import { Status } from "models/Status";
import { ReactComponent as Spinner } from 'shared/assets/icons/spinner.svg';
import { switchModal } from "../../../redux/AquariumSlice";
import { Line } from 'react-chartjs-2';
import { Chart as ChartJS, Tooltip, Legend, LinearScale, CategoryScale, PointElement, LineElement, Title, TimeScale, TimeSeriesScale, DateAdapter } from "chart.js";
import 'chartjs-adapter-moment';
import { ButtonGroup } from "shared/ui/ButtonGroup";
import { Button } from "shared/ui/Button";
import { useChartZoom } from "../lib/useChartZoom";

ChartJS.register(
  Tooltip,
  Legend,
  LinearScale,
  CategoryScale,
  PointElement,
  LineElement,
  Title,
  TimeScale,
  TimeSeriesScale
)

export interface ArchivePageProps {
  className?: string;
}

export const ArchivePage = ({ className }: ArchivePageProps) => {
  const dispatch = useAppDispatch()
  const [selectArchive, setSelectArchive] = useState("Chip tempurature")
  // const logs = useAppSelector(state => state.aquarium.logs)
  const logStatus = useAppSelector(state => state.aquarium.logStatus)
  const containerRef = useRef<HTMLDivElement>(null)
  const [period, setPeriod] = useState("h")

  const chartWidth = useChartZoom({ min: 400, max: 5000, step: 100 });


  useEffect(() => {
    // dispatch(switchModal(true));
    // fetch archive
  }, [dispatch])

  const labels = [
    "2025.08.13 09:00:00",
    "2025.08.13 09:00:30",
    "2025.08.13 09:01:30",
    "2025.08.13 09:02:00",
    "2025.08.13 09:03:30",
    "2025.08.13 09:04:00",
    "2025.08.13 09:05:00",
    "2025.08.13 09:05:30",
    "2025.08.13 09:06:30",
    "2025.08.13 09:07:00",
    "2025.08.13 09:09:00",
    "2025.08.13 09:09:30",
    "2025.08.13 09:10:30",
    "2025.08.13 09:11:00",
    "2025.08.13 09:12:30",
    "2025.08.13 09:13:00",
    "2025.08.13 09:14:00",
    "2025.08.13 09:14:30",
    "2025.08.13 09:16:00",
    "2025.08.13 09:16:30",
    "2025.08.13 09:18:00",
    "2025.08.13 09:18:30",
    "2025.08.13 09:20:00",
    "2025.08.13 09:20:30",
    "2025.08.13 09:22:00",
    "2025.08.13 09:22:30",
    "2025.08.13 09:23:30",
    "2025.08.13 09:24:00",
    "2025.08.13 09:26:00",
    "2025.08.13 09:26:30",
    "2025.08.13 09:27:30",
    "2025.08.13 09:28:00",
    "2025.08.13 09:29:30",
    "2025.08.13 09:30:00",
    "2025.08.13 09:32:00",
    "2025.08.13 09:32:30",
    "2025.08.13 09:33:30",
    "2025.08.13 09:34:00"

  ];
  const data = {
    labels,
    datasets: [
      {
        label: 'Chip temperature',
        data: [
          699.209228515625,
          699.516662597656,
          703.830139160156,
          709.114379882813,
          708.310546875,
          707.433349609375,
          709.414672851563,
          709.36962890625,
          711.945739746094,
          713.264770507813,
          716.685668945313,
          717.293640136719,
          720.751586914063,
          721.235046386719,
          724.218566894531,
          724.877319335938,
          727.10986328125,
          731.17578125,
          730.05859375,
          730.289916992188,
          734.505737304688,
          735.950134277344,
          736.955017089844,
          737.164306640625,
          739.53662109375,
          740.663696289063,
          743.38623046875,
          744.557312011719,
          747.452270507813,
          748.580627441406,
          749.373657226563,
          749.770141601563,
          753.169189453125,
          754.634765625,
          758.986999511719,
          760.440673828125,
          762.337768554688,
          763.306884765625,


        ],
        borderColor: 'rgb(255, 99, 132)',
        backgroundColor: 'rgba(255, 99, 132, 0.5)',
        yAxisID: 'y',
      },
      // {
      //   label: 'Dataset 2',
      //   data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
      //   borderColor: 'rgb(53, 162, 235)',
      //   backgroundColor: 'rgba(53, 162, 235, 0.5)',
      //   yAxisID: 'y',
      // },
    ],
  };
  const dataWaterTemp = {
    labels: [
      "2025.08.13 09:00:00",
      "2025.08.13 09:00:30",
      "2025.08.13 09:01:30",
      "2025.08.13 09:02:00",
      "2025.08.13 09:03:30",
      "2025.08.13 09:04:00",
      "2025.08.13 09:05:00",
      "2025.08.13 09:05:30",
      "2025.08.13 09:06:30",
      "2025.08.13 09:07:00",
      "2025.08.13 09:09:00",
      "2025.08.13 09:09:30",
      "2025.08.13 09:10:30",
      "2025.08.13 09:11:00",
      "2025.08.13 09:12:30",
      "2025.08.13 09:13:00",
      "2025.08.13 09:14:00",
      "2025.08.13 09:14:30",
      "2025.08.13 09:16:00",
      "2025.08.13 09:16:30",
      "2025.08.13 09:18:00",
      "2025.08.13 09:18:30",
      "2025.08.13 09:20:00",
      "2025.08.13 09:20:30",
      "2025.08.13 09:22:00",
      "2025.08.13 09:22:30",
      "2025.08.13 09:23:30",
      "2025.08.13 09:24:00",
      "2025.08.13 09:26:00",
      "2025.08.13 09:26:30",
      "2025.08.13 09:27:30",
      "2025.08.13 09:28:00",
      "2025.08.13 09:29:30",
      "2025.08.13 09:30:00",
      "2025.08.13 09:32:00",
      "2025.08.13 09:32:30",
      "2025.08.13 09:33:30",
      "2025.08.13 09:34:00"

    ],
    datasets: [
      {
        label: 'Chip temperature',
        data: [
          69.209228515625,
          69.516662597656,
          70.830139160156,
          70.114379882813,
          70.310546875,
          70.433349609375,
          70.414672851563,
          70.36962890625,
          71.945739746094,
          71.264770507813,
          71.685668945313,
          71.293640136719,
          72.751586914063,
          72.235046386719,
          72.218566894531,
          72.877319335938,
          72.10986328125,
          73.17578125,
          73.05859375,
          73.289916992188,
          73.505737304688,
          73.950134277344,
          73.955017089844,
          73.164306640625,
          73.53662109375,
          74.663696289063,
          74.38623046875,
          74.557312011719,
          74.452270507813,
          74.580627441406,
          74.373657226563,
          74.770141601563,
          75.169189453125,
          75.634765625,
          75.986999511719,
          76.440673828125,
          76.337768554688,
          76.306884765625,


        ],
        borderColor: 'rgb(255, 99, 132)',
        backgroundColor: 'rgba(255, 99, 132, 0.5)',
        yAxisID: 'y',
      },
      {
        label: 'COOL',
        data: ['ON', 'ON', 'OFF', 'ON', 'OFF', 'OFF', 'ON'],
        borderColor: 'rgb(0, 255, 0)',
        backgroundColor: 'rgb(0, 255, 0)',
        yAxisID: 'y1',
      }
    ],
  };


  const dateFertM = {
    labels: [
      "2025.08.01 13:00:00",
      "2025.08.02 13:00:00",
      "2025.08.03 13:00:00",
      "2025.08.04 13:00:00",
      "2025.08.05 13:00:00",
      "2025.08.06 13:00:00",
      "2025.08.07 13:00:00",
      "2025.08.08 13:00:00",
      "2025.08.09 13:00:00",
      "2025.08.10 13:00:00",
      "2025.08.11 13:00:00",
      "2025.08.12 13:00:00",
      "2025.08.13 13:00:00",
      "2025.08.14 13:00:00",
      "2025.08.15 13:00:00",
      "2025.08.16 13:00:00",
      "2025.08.17 13:00:00",
      "2025.08.18 13:00:00",
      "2025.08.19 13:00:00",
      "2025.08.20 13:00:00",
      "2025.08.21 13:00:00",
      "2025.08.22 13:00:00",
      "2025.08.23 13:00:00",
      "2025.08.24 13:00:00",
      "2025.08.25 13:00:00",
      "2025.08.26 13:00:00",
      "2025.08.27 13:00:00",
      "2025.08.28 13:00:00",
      "2025.08.29 13:00:00",
      "2025.08.30 13:00:00",
    ],
    datasets: [
      {
        label: 'PO4',
        data: [
          10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8
        ],
        borderColor: 'rgb(0, 155, 255)',
        backgroundColor: 'rgb(0, 100, 155)',
        yAxisID: 'y',
      },
      {
        label: 'NO3',
        data: [
          20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 20, 20, 20, 20, 25, 25, 25, 25, 25, 25
        ],
        borderColor: 'rgb(0, 155, 55)',
        backgroundColor: 'rgb(0, 100, 55)',
        yAxisID: 'y',
      },
      {
        label: 'Micro1',
        data: [
          5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5
        ],
        // stepped: true,
        borderColor: 'rgb(180, 55, 55)',
        backgroundColor: 'rgb(150, 25, 25)',
        yAxisID: 'y',
      },
      {
        label: 'Micro2',
        // stepped: true,
        data: [
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5
        ],
        borderColor: 'rgb(255, 255, 155)',
        backgroundColor: 'rgb(160, 160, 60)',
        yAxisID: 'y',
      }
    ],
  }
  const dateFertY = {
    labels: [
      "2025.01.01 13:00:00",
      "2025.01.02 13:00:00",
      "2025.01.03 13:00:00",
      "2025.01.04 13:00:00",
      "2025.01.05 13:00:00",
      "2025.01.06 13:00:00",
      "2025.01.07 13:00:00",
      "2025.01.08 13:00:00",
      "2025.01.09 13:00:00",
      "2025.01.10 13:00:00",
      "2025.01.11 13:00:00",
      "2025.01.12 13:00:00",
      "2025.01.13 13:00:00",
      "2025.01.14 13:00:00",
      "2025.01.15 13:00:00",
      "2025.01.16 13:00:00",
      "2025.01.17 13:00:00",
      "2025.01.18 13:00:00",
      "2025.01.19 13:00:00",
      "2025.01.20 13:00:00",
      "2025.01.21 13:00:00",
      "2025.01.22 13:00:00",
      "2025.01.23 13:00:00",
      "2025.01.24 13:00:00",
      "2025.01.25 13:00:00",
      "2025.01.26 13:00:00",
      "2025.01.27 13:00:00",
      "2025.01.28 13:00:00",
      "2025.01.29 13:00:00",
      "2025.01.30 13:00:00",

      "2025.02.01 13:00:00",
      "2025.02.02 13:00:00",
      "2025.02.03 13:00:00",
      "2025.02.04 13:00:00",
      "2025.02.05 13:00:00",
      "2025.02.06 13:00:00",
      "2025.02.07 13:00:00",
      "2025.02.08 13:00:00",
      "2025.02.09 13:00:00",
      "2025.02.10 13:00:00",
      "2025.02.11 13:00:00",
      "2025.02.12 13:00:00",
      "2025.02.13 13:00:00",
      "2025.02.14 13:00:00",
      "2025.02.15 13:00:00",
      "2025.02.16 13:00:00",
      "2025.02.17 13:00:00",
      "2025.02.18 13:00:00",
      "2025.02.19 13:00:00",
      "2025.02.20 13:00:00",
      "2025.02.21 13:00:00",
      "2025.02.22 13:00:00",
      "2025.02.23 13:00:00",
      "2025.02.24 13:00:00",
      "2025.02.25 13:00:00",
      "2025.02.26 13:00:00",
      "2025.02.27 13:00:00",
      "2025.02.28 13:00:00",
      "2025.02.29 13:00:00",
      "2025.02.30 13:00:00",

      "2025.03.01 13:00:00",
      "2025.03.02 13:00:00",
      "2025.03.03 13:00:00",
      "2025.03.04 13:00:00",
      "2025.03.05 13:00:00",
      "2025.03.06 13:00:00",
      "2025.03.07 13:00:00",
      "2025.03.08 13:00:00",
      "2025.03.09 13:00:00",
      "2025.03.10 13:00:00",
      "2025.03.11 13:00:00",
      "2025.03.12 13:00:00",
      "2025.03.13 13:00:00",
      "2025.03.14 13:00:00",
      "2025.03.15 13:00:00",
      "2025.03.16 13:00:00",
      "2025.03.17 13:00:00",
      "2025.03.18 13:00:00",
      "2025.03.19 13:00:00",
      "2025.03.20 13:00:00",
      "2025.03.21 13:00:00",
      "2025.03.22 13:00:00",
      "2025.03.23 13:00:00",
      "2025.03.24 13:00:00",
      "2025.03.25 13:00:00",
      "2025.03.26 13:00:00",
      "2025.03.27 13:00:00",
      "2025.03.28 13:00:00",
      "2025.03.29 13:00:00",
      "2025.03.30 13:00:00",

      "2025.04.01 13:00:00",
      "2025.04.02 13:00:00",
      "2025.04.03 13:00:00",
      "2025.04.04 13:00:00",
      "2025.04.05 13:00:00",
      "2025.04.06 13:00:00",
      "2025.04.07 13:00:00",
      "2025.04.08 13:00:00",
      "2025.04.09 13:00:00",
      "2025.04.10 13:00:00",
      "2025.04.11 13:00:00",
      "2025.04.12 13:00:00",
      "2025.04.13 13:00:00",
      "2025.04.14 13:00:00",
      "2025.04.15 13:00:00",
      "2025.04.16 13:00:00",
      "2025.04.17 13:00:00",
      "2025.04.18 13:00:00",
      "2025.04.19 13:00:00",
      "2025.04.20 13:00:00",
      "2025.04.21 13:00:00",
      "2025.04.22 13:00:00",
      "2025.04.23 13:00:00",
      "2025.04.24 13:00:00",
      "2025.04.25 13:00:00",
      "2025.04.26 13:00:00",
      "2025.04.27 13:00:00",
      "2025.04.28 13:00:00",
      "2025.04.29 13:00:00",
      "2025.04.30 13:00:00",

      "2025.05.01 13:00:00",
      "2025.05.02 13:00:00",
      "2025.05.03 13:00:00",
      "2025.05.04 13:00:00",
      "2025.05.05 13:00:00",
      "2025.05.06 13:00:00",
      "2025.05.07 13:00:00",
      "2025.05.08 13:00:00",
      "2025.05.09 13:00:00",
      "2025.05.10 13:00:00",
      "2025.05.11 13:00:00",
      "2025.05.12 13:00:00",
      "2025.05.13 13:00:00",
      "2025.05.14 13:00:00",
      "2025.05.15 13:00:00",
      "2025.05.16 13:00:00",
      "2025.05.17 13:00:00",
      "2025.05.18 13:00:00",
      "2025.05.19 13:00:00",
      "2025.05.20 13:00:00",
      "2025.05.21 13:00:00",
      "2025.05.22 13:00:00",
      "2025.05.23 13:00:00",
      "2025.05.24 13:00:00",
      "2025.05.25 13:00:00",
      "2025.05.26 13:00:00",
      "2025.05.27 13:00:00",
      "2025.05.28 13:00:00",
      "2025.05.29 13:00:00",
      "2025.05.30 13:00:00",

      "2025.06.01 13:00:00",
      "2025.06.02 13:00:00",
      "2025.06.03 13:00:00",
      "2025.06.04 13:00:00",
      "2025.06.05 13:00:00",
      "2025.06.06 13:00:00",
      "2025.06.07 13:00:00",
      "2025.06.08 13:00:00",
      "2025.06.09 13:00:00",
      "2025.06.10 13:00:00",
      "2025.06.11 13:00:00",
      "2025.06.12 13:00:00",
      "2025.06.13 13:00:00",
      "2025.06.14 13:00:00",
      "2025.06.15 13:00:00",
      "2025.06.16 13:00:00",
      "2025.06.17 13:00:00",
      "2025.06.18 13:00:00",
      "2025.06.19 13:00:00",
      "2025.06.20 13:00:00",
      "2025.06.21 13:00:00",
      "2025.06.22 13:00:00",
      "2025.06.23 13:00:00",
      "2025.06.24 13:00:00",
      "2025.06.25 13:00:00",
      "2025.06.26 13:00:00",
      "2025.06.27 13:00:00",
      "2025.06.28 13:00:00",
      "2025.06.29 13:00:00",
      "2025.06.30 13:00:00",

      "2025.07.01 13:00:00",
      "2025.07.02 13:00:00",
      "2025.07.03 13:00:00",
      "2025.07.04 13:00:00",
      "2025.07.05 13:00:00",
      "2025.07.06 13:00:00",
      "2025.07.07 13:00:00",
      "2025.07.08 13:00:00",
      "2025.07.09 13:00:00",
      "2025.07.10 13:00:00",
      "2025.07.11 13:00:00",
      "2025.07.12 13:00:00",
      "2025.07.13 13:00:00",
      "2025.07.14 13:00:00",
      "2025.07.15 13:00:00",
      "2025.07.16 13:00:00",
      "2025.07.17 13:00:00",
      "2025.07.18 13:00:00",
      "2025.07.19 13:00:00",
      "2025.07.20 13:00:00",
      "2025.07.21 13:00:00",
      "2025.07.22 13:00:00",
      "2025.07.23 13:00:00",
      "2025.07.24 13:00:00",
      "2025.07.25 13:00:00",
      "2025.07.26 13:00:00",
      "2025.07.27 13:00:00",
      "2025.07.28 13:00:00",
      "2025.07.29 13:00:00",
      "2025.07.30 13:00:00",

      "2025.08.01 13:00:00",
      "2025.08.02 13:00:00",
      "2025.08.03 13:00:00",
      "2025.08.04 13:00:00",
      "2025.08.05 13:00:00",
      "2025.08.06 13:00:00",
      "2025.08.07 13:00:00",
      "2025.08.08 13:00:00",
      "2025.08.09 13:00:00",
      "2025.08.10 13:00:00",
      "2025.08.11 13:00:00",
      "2025.08.12 13:00:00",
      "2025.08.13 13:00:00",
      "2025.08.14 13:00:00",
      "2025.08.15 13:00:00",
      "2025.08.16 13:00:00",
      "2025.08.17 13:00:00",
      "2025.08.18 13:00:00",
      "2025.08.19 13:00:00",
      "2025.08.20 13:00:00",
      "2025.08.21 13:00:00",
      "2025.08.22 13:00:00",
      "2025.08.23 13:00:00",
      "2025.08.24 13:00:00",
      "2025.08.25 13:00:00",
      "2025.08.26 13:00:00",
      "2025.08.27 13:00:00",
      "2025.08.28 13:00:00",
      "2025.08.29 13:00:00",
      "2025.08.30 13:00:00",

      "2025.09.01 13:00:00",
      "2025.09.02 13:00:00",
      "2025.09.03 13:00:00",
      "2025.09.04 13:00:00",
      "2025.09.05 13:00:00",
      "2025.09.06 13:00:00",
      "2025.09.07 13:00:00",
      "2025.09.08 13:00:00",
      "2025.09.09 13:00:00",
      "2025.09.10 13:00:00",
      "2025.09.11 13:00:00",
      "2025.09.12 13:00:00",
      "2025.09.13 13:00:00",
      "2025.09.14 13:00:00",
      "2025.09.15 13:00:00",
      "2025.09.16 13:00:00",
      "2025.09.17 13:00:00",
      "2025.09.18 13:00:00",
      "2025.09.19 13:00:00",
      "2025.09.20 13:00:00",
      "2025.09.21 13:00:00",
      "2025.09.22 13:00:00",
      "2025.09.23 13:00:00",
      "2025.09.24 13:00:00",
      "2025.09.25 13:00:00",
      "2025.09.26 13:00:00",
      "2025.09.27 13:00:00",
      "2025.09.28 13:00:00",
      "2025.09.29 13:00:00",
      "2025.09.30 13:00:00",

      "2025.10.01 13:00:00",
      "2025.10.02 13:00:00",
      "2025.10.03 13:00:00",
      "2025.10.04 13:00:00",
      "2025.10.05 13:00:00",
      "2025.10.06 13:00:00",
      "2025.10.07 13:00:00",
      "2025.10.08 13:00:00",
      "2025.10.09 13:00:00",
      "2025.10.10 13:00:00",
      "2025.10.11 13:00:00",
      "2025.10.12 13:00:00",
      "2025.10.13 13:00:00",
      "2025.10.14 13:00:00",
      "2025.10.15 13:00:00",
      "2025.10.16 13:00:00",
      "2025.10.17 13:00:00",
      "2025.10.18 13:00:00",
      "2025.10.19 13:00:00",
      "2025.10.20 13:00:00",
      "2025.10.21 13:00:00",
      "2025.10.22 13:00:00",
      "2025.10.23 13:00:00",
      "2025.10.24 13:00:00",
      "2025.10.25 13:00:00",
      "2025.10.26 13:00:00",
      "2025.10.27 13:00:00",
      "2025.10.28 13:00:00",
      "2025.10.29 13:00:00",
      "2025.10.30 13:00:00",

      "2025.11.01 13:00:00",
      "2025.11.02 13:00:00",
      "2025.11.03 13:00:00",
      "2025.11.04 13:00:00",
      "2025.11.05 13:00:00",
      "2025.11.06 13:00:00",
      "2025.11.07 13:00:00",
      "2025.11.08 13:00:00",
      "2025.11.09 13:00:00",
      "2025.11.10 13:00:00",
      "2025.11.11 13:00:00",
      "2025.11.12 13:00:00",
      "2025.11.13 13:00:00",
      "2025.11.14 13:00:00",
      "2025.11.15 13:00:00",
      "2025.11.16 13:00:00",
      "2025.11.17 13:00:00",
      "2025.11.18 13:00:00",
      "2025.11.19 13:00:00",
      "2025.11.20 13:00:00",
      "2025.11.21 13:00:00",
      "2025.11.22 13:00:00",
      "2025.11.23 13:00:00",
      "2025.11.24 13:00:00",
      "2025.11.25 13:00:00",
      "2025.11.26 13:00:00",
      "2025.11.27 13:00:00",
      "2025.11.28 13:00:00",
      "2025.11.29 13:00:00",
      "2025.11.30 13:00:00",

      "2025.12.01 13:00:00",
      "2025.12.02 13:00:00",
      "2025.12.03 13:00:00",
      "2025.12.04 13:00:00",
      "2025.12.05 13:00:00",
      "2025.12.06 13:00:00",
      "2025.12.07 13:00:00",
      "2025.12.08 13:00:00",
      "2025.12.09 13:00:00",
      "2025.12.10 13:00:00",
      "2025.12.11 13:00:00",
      "2025.12.12 13:00:00",
      "2025.12.13 13:00:00",
      "2025.12.14 13:00:00",
      "2025.12.15 13:00:00",
      "2025.12.16 13:00:00",
      "2025.12.17 13:00:00",
      "2025.12.18 13:00:00",
      "2025.12.19 13:00:00",
      "2025.12.20 13:00:00",
      "2025.12.21 13:00:00",
      "2025.12.22 13:00:00",
      "2025.12.23 13:00:00",
      "2025.12.24 13:00:00",
      "2025.12.25 13:00:00",
      "2025.12.26 13:00:00",
      "2025.12.27 13:00:00",
      "2025.12.28 13:00:00",
      "2025.12.29 13:00:00",
      "2025.12.30 13:00:00",

    ],
    datasets: [
      {
        label: 'PO4',
        data: [
          10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 12, 12,
          10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 12, 12,
          10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 12, 12,
          10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 12, 12,
          10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 12, 12,
          10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 12, 12,
          10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 12, 12,
          10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 12, 12,
          10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 12, 12,
          10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 12, 12,
          10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 12, 12,
          10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 12, 12,
        ],
        borderColor: 'rgb(0, 155, 255)',
        backgroundColor: 'rgb(0, 100, 155)',
        yAxisID: 'y',
      },
      {
        label: 'NO3',
        data: [
          20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 20, 20, 20, 20, 25, 25, 25, 25, 25, 25, 20, 20, 20, 20, 20, 20, 20, 20, 20,
          20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 20, 20, 20, 20, 25, 25, 25, 25, 25, 25, 20, 20, 20, 20, 20, 20, 20, 20, 20,
          20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 20, 20, 20, 20, 25, 25, 25, 25, 25, 25, 20, 20, 20, 20, 20, 20, 20, 20, 20,
          20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 20, 20, 20, 20, 25, 25, 25, 25, 25, 25, 20, 20, 20, 20, 20, 20, 20, 20, 20,
          20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 20, 20, 20, 20, 25, 25, 25, 25, 25, 25, 20, 20, 20, 20, 20, 20, 20, 20, 20,
          20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 20, 20, 20, 20, 25, 25, 25, 25, 25, 25, 20, 20, 20, 20, 20, 20, 20, 20, 20,
          20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 20, 20, 20, 20, 25, 25, 25, 25, 25, 25, 20, 20, 20, 20, 20, 20, 20, 20, 20,
          20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 20, 20, 20, 20, 25, 25, 25, 25, 25, 25, 20, 20, 20, 20, 20, 20, 20, 20, 20,
          20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 20, 20, 20, 20, 25, 25, 25, 25, 25, 25, 20, 20, 20, 20, 20, 20, 20, 20, 20,
          20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 20, 20, 20, 20, 25, 25, 25, 25, 25, 25, 20, 20, 20, 20, 20, 20, 20, 20, 20,
          20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 20, 20, 20, 20, 25, 25, 25, 25, 25, 25, 20, 20, 20, 20, 20, 20, 20, 20, 20,
          20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 20, 20, 20, 20, 25, 25, 25, 25, 25, 25, 20, 20, 20, 20, 20, 20, 20, 20, 20,
        ],
        borderColor: 'rgb(0, 155, 55)',
        backgroundColor: 'rgb(0, 100, 55)',
        yAxisID: 'y',
      },
      {
        label: 'Micro1',
        data: [
          5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0,
          5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0,
          5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0,
          5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0,
          5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0,
          5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0,
          5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0,
          5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0,
          5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0,
          5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0,
          5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0,
          5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0,
        ],
        // stepped: true,
        borderColor: 'rgb(180, 55, 55)',
        backgroundColor: 'rgb(150, 25, 25)',
        yAxisID: 'y',
      },
      {
        label: 'Micro2',
        // stepped: true,
        data: [
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        ],
        borderColor: 'rgb(255, 255, 155)',
        backgroundColor: 'rgb(160, 160, 60)',
        yAxisID: 'y',
      }
    ],
  }
  const dateFertW = {
    labels: [
      "2025.08.01 13:00:00",
      "2025.08.02 13:00:00",
      "2025.08.03 13:00:00",
      "2025.08.04 13:00:00",
      "2025.08.05 13:00:00",
      "2025.08.06 13:00:00",
      "2025.08.07 13:00:00",
    ],
    datasets: [
      {
        label: 'PO4',
        data: [
          10, 10, 10, 10, 10, 10, 12
        ],
        borderColor: 'rgb(0, 155, 255)',
        backgroundColor: 'rgb(0, 100, 155)',
        yAxisID: 'y',
      },
      {
        label: 'NO3',
        data: [
          20, 20, 20, 20, 20, 20, 22
        ],
        borderColor: 'rgb(0, 155, 55)',
        backgroundColor: 'rgb(0, 100, 55)',
        yAxisID: 'y',
      },
      {
        label: 'Micro1',
        data: [
          5, 0, 0, 0, 0, 5, 0
        ],
        // stepped: true,
        borderColor: 'rgb(180, 55, 55)',
        backgroundColor: 'rgb(150, 25, 25)',
        yAxisID: 'y',
      },
      {
        label: 'Micro2',
        // stepped: true,
        data: [
          5, 5, 5, 5, 5, 5, 5
        ],
        borderColor: 'rgb(255, 255, 155)',
        backgroundColor: 'rgb(160, 160, 60)',
        yAxisID: 'y',
      }
    ],
  }

  const getFertilizerDate = () => {
    switch (period) {
      case "h":
        return dateFertM;
      case "d":
        return dateFertM;
      case "w":
        return dateFertW;
      case "m":
        return dateFertM;
      case "y":
        return dateFertY;
      case "all":
        return dateFertM;
      default:
        return dateFertM;
    }
  }
  
  return (
    <Page className={classNames(cls.archivePage, {}, [className])}>
      <div className={cls.log_body}>
        <div className={cls.log_header}>
          <h2 className={cls.log_title}>Archive</h2>
          <Dropdown className="" select={selectArchive} items={[
            [{
              content: 'Chip tempurature',
              onClick: () => setSelectArchive("Chip tempurature")
            },
            {
              content: 'Water tempurature',
              onClick: () => setSelectArchive("Water tempurature")
            },
            {
              content: 'Outside',
              onClick: () => setSelectArchive("Outside")
            },
            {
              content: 'Fertilizer',
              onClick: () => setSelectArchive("Fertilizer")
            }]
          ]} />
        </div>


        {/* {logStatus === Status.Loading &&
            <div className={cls.spinner_container}>
              <Spinner className={cls.spinner} />
            </div>
          } */}

        {selectArchive === "Chip tempurature" &&
          <div ref={containerRef} className={cls.log_container}>
            <Line className={cls.chart} options={
              {
                maintainAspectRatio: false,
                plugins: {
                  title: {
                    display: false,
                    // text: 'Stacked scales',
                  },
                  legend: {
                    labels: {
                      color: 'white'
                    }
                  }
                },
                scales: {
                  x: {
                    type: 'time',
                    // time: {
                    //   displayFormats: {
                    //     quarter: 'MMM YYYY'
                    //   }
                    // },
                    grid: {
                      color: 'white'
                    },
                    ticks: {
                      color: 'white' // Color for X-axis tick labels
                    }
                  },
                  y: {
                    type: 'linear' as const,
                    display: true,
                    position: 'left' as const,
                    grid: {
                      color: 'white'
                    },
                    ticks: {
                      color: 'white' // Color for X-axis tick labels
                    }
                  },
                }
              }
            } data={data} />
          </div>
        }
        {selectArchive === "Water tempurature" &&
          <div ref={containerRef} className={cls.log_container}>
            <Line className={cls.chart} options={
              {
                maintainAspectRatio: false,
                plugins: {
                  title: {
                    display: false,
                    // text: 'Stacked scales',
                  },
                  legend: {
                    labels: {
                      color: 'white'
                    }
                  }
                },
                scales: {
                  x: {
                    type: 'time',
                    // time: {
                    //   displayFormats: {
                    //     quarter: 'MMM YYYY'
                    //   }
                    // },
                    grid: {
                      color: 'white'
                    },
                    ticks: {
                      color: 'white' // Color for X-axis tick labels
                    }
                  },
                  y: {
                    type: 'linear' as const,
                    display: true,
                    position: 'left' as const,
                    grid: {
                      color: 'white'
                    },
                    ticks: {
                      color: 'white' // Color for X-axis tick labels
                    }
                  },
                  y1: {
                    type: 'category',
                    labels: ['ON', 'OFF'],
                    offset: true,

                    position: 'right',
                    stack: 'demo',
                    stackWeight: 1,
                    ticks: {
                      color: 'white' // Color for X-axis tick labels
                    }
                    // border: {
                    //   color: Utils.CHART_COLORS.blue
                    // }
                  },
                }
              }
            } data={{
              labels: [
                "2025.08.13 09:00:00",
                "2025.08.13 09:00:30",
                "2025.08.13 09:01:30",
                "2025.08.13 09:02:00",
                "2025.08.13 09:03:30",
                "2025.08.13 09:04:00",
                "2025.08.13 09:05:00",
                "2025.08.13 09:05:30",
                "2025.08.13 09:06:30",
                "2025.08.13 09:07:00",
                "2025.08.13 09:09:00",
                "2025.08.13 09:09:30",
                "2025.08.13 09:10:30",
                "2025.08.13 09:11:00",
                "2025.08.13 09:12:30",
                "2025.08.13 09:13:00",
                "2025.08.13 09:14:00",
                "2025.08.13 09:14:30",
                "2025.08.13 09:16:00",
                "2025.08.13 09:16:30",
                "2025.08.13 09:18:00",
                "2025.08.13 09:18:30",
                "2025.08.13 09:20:00",
                "2025.08.13 09:20:30",
                "2025.08.13 09:22:00",
                "2025.08.13 09:22:30",
                "2025.08.13 09:23:30",
                "2025.08.13 09:24:00",
                "2025.08.13 09:26:00",
                "2025.08.13 09:26:30",
                "2025.08.13 09:27:30",
                "2025.08.13 09:28:00",
                "2025.08.13 09:29:30",
                "2025.08.13 09:30:00",
                "2025.08.13 09:32:00",
                "2025.08.13 09:32:30",
                "2025.08.13 09:33:30",
                "2025.08.13 09:34:00"

              ],
              datasets: [
                {
                  label: 'Chip temperature',
                  data: [
                    69.209228515625,
                    69.516662597656,
                    70.830139160156,
                    70.114379882813,
                    70.310546875,
                    70.433349609375,
                    70.414672851563,
                    70.36962890625,
                    71.945739746094,
                    71.264770507813,
                    71.685668945313,
                    71.293640136719,
                    72.751586914063,
                    72.235046386719,
                    72.218566894531,
                    72.877319335938,
                    72.10986328125,
                    73.17578125,
                    73.05859375,
                    73.289916992188,
                    73.505737304688,
                    73.950134277344,
                    73.955017089844,
                    73.164306640625,
                    73.53662109375,
                    74.663696289063,
                    74.38623046875,
                    74.557312011719,
                    74.452270507813,
                    74.580627441406,
                    74.373657226563,
                    74.770141601563,
                    75.169189453125,
                    75.634765625,
                    75.986999511719,
                    76.440673828125,
                    76.337768554688,
                    76.306884765625,


                  ],
                  borderColor: 'rgb(0, 155, 255)',
                  backgroundColor: 'rgb(0, 100, 155)',
                  yAxisID: 'y',
                },
                {
                  label: 'COOL',
                  data: ['OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'ON', 'ON', 'OFF', 'OFF', 'ON', 'ON', 'ON', 'ON', 'ON', 'ON', 'ON', 'ON', 'ON', 'ON', 'ON', 'ON', 'ON'],
                  stepped: true,
                  borderColor: 'rgb(0, 200, 0)',
                  backgroundColor: 'rgb(0, 100, 0)',
                  yAxisID: 'y1',
                },
                {
                  label: 'HEAT',
                  data: ['OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF'],
                  stepped: true,
                  borderColor: 'rgb(230, 69, 62)',
                  backgroundColor: 'rgba(200, 69, 62, 0.5)',
                  yAxisID: 'y1',
                }
              ],
            }} />
          </div>
        }
        {selectArchive === "Outside" &&
          <>
            <div ref={containerRef} className={cls.outsideContainer}>
              <Line className={cls.chart} options={
                {
                  maintainAspectRatio: false,
                  plugins: {
                    title: {
                      display: true,
                      text: 'Outside temperature',
                      color: 'white'
                    },
                    legend: {
                      labels: {
                        color: 'white'
                      }
                    }
                  },
                  scales: {
                    x: {
                      type: 'time',
                      // time: {
                      //   displayFormats: {
                      //     quarter: 'MMM YYYY'
                      //   }
                      // },
                      grid: {
                        color: 'white'
                      },
                      ticks: {
                        color: 'white' // Color for X-axis tick labels
                      }
                    },
                    y: {
                      type: 'linear' as const,
                      display: true,
                      position: 'left' as const,
                      grid: {
                        color: 'white'
                      },
                      ticks: {
                        color: 'white' // Color for X-axis tick labels
                      }
                    },
                  }
                }
              } data={data} />
            </div>
            <div ref={containerRef} className={cls.outsideContainer}>
              <Line className={cls.chart} options={
                {
                  maintainAspectRatio: false,
                  plugins: {
                    title: {
                      display: true,
                      text: 'Outside humidity',
                      color: 'white'
                    },
                    legend: {
                      labels: {
                        color: 'white'
                      }
                    }
                  },
                  scales: {
                    x: {
                      type: 'time',
                      // time: {
                      //   displayFormats: {
                      //     quarter: 'MMM YYYY'
                      //   }
                      // },
                      grid: {
                        color: 'white'
                      },
                      ticks: {
                        color: 'white' // Color for X-axis tick labels
                      }
                    },
                    y: {
                      type: 'linear' as const,
                      display: true,
                      position: 'left' as const,
                      grid: {
                        color: 'white'
                      },
                      ticks: {
                        color: 'white' // Color for X-axis tick labels
                      }
                    },
                  }
                }
              } data={data} />
            </div>
          </>
        }
        {selectArchive === "Fertilizer" &&
          <>
            <ButtonGroup className={cls.button_group}>
              <Button theme={period == "h" ? 'primary' : 'color-outline'} onClick={(e) => setPeriod("h")}>1H</Button>
              <Button theme={period == "d" ? 'primary' : 'color-outline'} onClick={(e) => setPeriod("d")}>1D</Button>
              <Button theme={period == "w" ? 'primary' : 'color-outline'} onClick={(e) => setPeriod("w")}>1W</Button>
              <Button theme={period == "m" ? 'primary' : 'color-outline'} onClick={(e) => setPeriod("m")}>1M</Button>
              <Button theme={period == "y" ? 'primary' : 'color-outline'} onClick={(e) => setPeriod("y")}>1Y</Button>
              <Button theme={period == "all" ? 'primary' : 'color-outline'} onClick={(e) => setPeriod("all")}>ALL</Button>
            </ButtonGroup>
            <div ref={containerRef} className={cls.log_container} >
              <div className={cls.scrollContainer} style={{ width: chartWidth || "100%" }}>
                <Line className={cls.chart} options={
                  {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                      title: {
                        display: false,
                        text: 'Fertilizer',
                        color: 'white'
                      },
                      legend: {
                        labels: {
                          color: 'white'
                        }
                      }
                    },
                    scales: {
                      x: {
                        type: 'time',
                        // time: {
                        //   displayFormats: {
                        //     quarter: 'MMM YYYY'
                        //   }
                        // },
                        grid: {
                          lineWidth: 1,
                          color: 'rgb(50, 50, 50)'
                        },
                        ticks: {
                          color: 'white' // Color for X-axis tick labels
                        }
                      },
                      y: {
                        type: 'linear' as const,
                        display: true,
                        position: 'left' as const,
                        grid: {
                          lineWidth: 1,
                          color: 'rgb(50, 50, 50)'
                        },
                        ticks: {
                          color: 'white' // Color for X-axis tick labels
                        }
                      },
                    }
                  }
                } data={getFertilizerDate()} />
              </div>
            </div>
          </>
        }
      </div>
    </Page>
  );
};
